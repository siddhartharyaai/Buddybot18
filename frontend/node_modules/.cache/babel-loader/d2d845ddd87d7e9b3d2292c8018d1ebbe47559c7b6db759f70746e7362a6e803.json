{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/components/VoiceControl.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { MicrophoneIcon } from '@heroicons/react/24/outline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceControl = ({\n  onStartAmbientListening,\n  onStopAmbientListening,\n  darkMode\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      console.log('🎤 Starting simple voice recording...');\n\n      // Request microphone permission - simple approach like ChatGPT/Gemini\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 16000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      });\n      console.log('✅ Microphone access granted');\n\n      // Create MediaRecorder - use webm like other voice bots\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        console.log('🎤 Recording stopped, processing...');\n        setIsProcessing(true);\n        try {\n          // Create audio blob and send to backend\n          const audioBlob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n          await processVoiceInput(audioBlob);\n        } catch (error) {\n          console.error('❌ Error processing voice:', error);\n        } finally {\n          setIsProcessing(false);\n        }\n      };\n\n      // Start recording\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      console.log('🎤 Recording started');\n    } catch (error) {\n      console.error('❌ Microphone error:', error);\n      alert('Please allow microphone access and try again. Make sure no other app is using your microphone.');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      console.log('🎤 Stopping recording...');\n      mediaRecorderRef.current.stop();\n\n      // Stop all tracks to release microphone\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      setIsRecording(false);\n    }\n  };\n  const processVoiceInput = async audioBlob => {\n    try {\n      // Convert to base64 for API transmission\n      const base64Audio = await blobToBase64(audioBlob);\n\n      // Send to backend for STT + conversation processing\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/conversations/voice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          session_id: Date.now().toString(),\n          // Simple session ID\n          user_id: 'test_user',\n          audio_base64: base64Audio\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('✅ Voice response received:', data.response_text);\n\n        // Play TTS audio if available\n        if (data.response_audio) {\n          playTTSAudio(data.response_audio);\n        }\n      } else {\n        console.error('❌ Voice API error:', response.status);\n        alert('Voice processing failed. Please try again.');\n      }\n    } catch (error) {\n      console.error('❌ Voice processing error:', error);\n      alert('Voice processing failed. Please try again.');\n    }\n  };\n  const blobToBase64 = blob => {\n    return new Promise(resolve => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const base64 = reader.result.split(',')[1];\n        resolve(base64);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  const playTTSAudio = base64Audio => {\n    try {\n      // Create audio element and play - simple like other voice bots\n      const audio = new Audio(`data:audio/wav;base64,${base64Audio}`);\n      audio.play().catch(console.error);\n      console.log('🔊 Playing TTS audio');\n    } catch (error) {\n      console.error('❌ TTS playback error:', error);\n    }\n  };\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else if (!isProcessing) {\n      startRecording();\n    }\n  };\n  const getButtonStyle = () => {\n    if (isProcessing) {\n      return 'bg-yellow-500 text-white shadow-lg shadow-yellow-500/25 animate-pulse';\n    } else if (isRecording) {\n      return 'bg-red-500 text-white shadow-lg shadow-red-500/25 animate-pulse';\n    } else {\n      return darkMode ? 'bg-gray-700 text-gray-300 hover:bg-blue-600 hover:text-white' : 'bg-blue-500 text-white hover:bg-blue-600';\n    }\n  };\n  const getStatusText = () => {\n    if (isProcessing) return 'Processing...';\n    if (isRecording) return 'Recording - Click to stop';\n    return 'Click to record';\n  };\n  const getButtonText = () => {\n    if (isProcessing) return 'Processing...';\n    if (isRecording) return 'Stop';\n    return 'Record';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(motion.button, {\n      type: \"button\",\n      onClick: handleClick,\n      disabled: isProcessing,\n      whileHover: {\n        scale: isProcessing ? 1 : 1.05\n      },\n      whileTap: {\n        scale: isProcessing ? 1 : 0.95\n      },\n      className: `p-4 rounded-full transition-all duration-300 ${getButtonStyle()}`,\n      title: getStatusText(),\n      children: /*#__PURE__*/_jsxDEV(MicrophoneIcon, {\n        className: \"w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-xs px-3 py-1 rounded-full ${isRecording ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : isProcessing ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' : 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-200'}`,\n      children: getStatusText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-xs text-center max-w-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`,\n      children: [!isRecording && !isProcessing && 'Click to record your message', isRecording && 'Speak now, click again to stop', isProcessing && 'Processing your voice...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceControl, \"M3M2S3eczigosC+aRUWP75shTKw=\");\n_c = VoiceControl;\nexport default VoiceControl;\nvar _c;\n$RefreshReg$(_c, \"VoiceControl\");","map":{"version":3,"names":["React","useState","useRef","motion","MicrophoneIcon","jsxDEV","_jsxDEV","VoiceControl","onStartAmbientListening","onStopAmbientListening","darkMode","_s","isRecording","setIsRecording","isProcessing","setIsProcessing","mediaRecorderRef","audioChunksRef","startRecording","console","log","stream","navigator","mediaDevices","getUserMedia","audio","sampleRate","channelCount","echoCancellation","noiseSuppression","current","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","processVoiceInput","error","start","alert","stopRecording","stop","getTracks","forEach","track","base64Audio","blobToBase64","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","body","JSON","stringify","session_id","Date","now","toString","user_id","audio_base64","ok","json","response_text","response_audio","playTTSAudio","status","blob","Promise","resolve","reader","FileReader","onloadend","base64","result","split","readAsDataURL","Audio","play","catch","handleClick","getButtonStyle","getStatusText","getButtonText","className","children","button","onClick","disabled","whileHover","scale","whileTap","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/frontend/src/components/VoiceControl.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { MicrophoneIcon } from '@heroicons/react/24/outline';\n\nconst VoiceControl = ({ onStartAmbientListening, onStopAmbientListening, darkMode }) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const startRecording = async () => {\n    try {\n      console.log('🎤 Starting simple voice recording...');\n      \n      // Request microphone permission - simple approach like ChatGPT/Gemini\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          sampleRate: 16000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      });\n      \n      console.log('✅ Microphone access granted');\n      \n      // Create MediaRecorder - use webm like other voice bots\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      \n      audioChunksRef.current = [];\n      \n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorderRef.current.onstop = async () => {\n        console.log('🎤 Recording stopped, processing...');\n        setIsProcessing(true);\n        \n        try {\n          // Create audio blob and send to backend\n          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n          await processVoiceInput(audioBlob);\n        } catch (error) {\n          console.error('❌ Error processing voice:', error);\n        } finally {\n          setIsProcessing(false);\n        }\n      };\n      \n      // Start recording\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      \n      console.log('🎤 Recording started');\n      \n    } catch (error) {\n      console.error('❌ Microphone error:', error);\n      alert('Please allow microphone access and try again. Make sure no other app is using your microphone.');\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      console.log('🎤 Stopping recording...');\n      mediaRecorderRef.current.stop();\n      \n      // Stop all tracks to release microphone\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      \n      setIsRecording(false);\n    }\n  };\n\n  const processVoiceInput = async (audioBlob) => {\n    try {\n      // Convert to base64 for API transmission\n      const base64Audio = await blobToBase64(audioBlob);\n      \n      // Send to backend for STT + conversation processing\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/conversations/voice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          session_id: Date.now().toString(), // Simple session ID\n          user_id: 'test_user',\n          audio_base64: base64Audio\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('✅ Voice response received:', data.response_text);\n        \n        // Play TTS audio if available\n        if (data.response_audio) {\n          playTTSAudio(data.response_audio);\n        }\n      } else {\n        console.error('❌ Voice API error:', response.status);\n        alert('Voice processing failed. Please try again.');\n      }\n      \n    } catch (error) {\n      console.error('❌ Voice processing error:', error);\n      alert('Voice processing failed. Please try again.');\n    }\n  };\n\n  const blobToBase64 = (blob) => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const base64 = reader.result.split(',')[1];\n        resolve(base64);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n\n  const playTTSAudio = (base64Audio) => {\n    try {\n      // Create audio element and play - simple like other voice bots\n      const audio = new Audio(`data:audio/wav;base64,${base64Audio}`);\n      audio.play().catch(console.error);\n      console.log('🔊 Playing TTS audio');\n    } catch (error) {\n      console.error('❌ TTS playback error:', error);\n    }\n  };\n\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else if (!isProcessing) {\n      startRecording();\n    }\n  };\n\n  const getButtonStyle = () => {\n    if (isProcessing) {\n      return 'bg-yellow-500 text-white shadow-lg shadow-yellow-500/25 animate-pulse';\n    } else if (isRecording) {\n      return 'bg-red-500 text-white shadow-lg shadow-red-500/25 animate-pulse';\n    } else {\n      return darkMode \n        ? 'bg-gray-700 text-gray-300 hover:bg-blue-600 hover:text-white' \n        : 'bg-blue-500 text-white hover:bg-blue-600';\n    }\n  };\n\n  const getStatusText = () => {\n    if (isProcessing) return 'Processing...';\n    if (isRecording) return 'Recording - Click to stop';\n    return 'Click to record';\n  };\n\n  const getButtonText = () => {\n    if (isProcessing) return 'Processing...';\n    if (isRecording) return 'Stop';\n    return 'Record';\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-2\">\n      <motion.button\n        type=\"button\"\n        onClick={handleClick}\n        disabled={isProcessing}\n        whileHover={{ scale: isProcessing ? 1 : 1.05 }}\n        whileTap={{ scale: isProcessing ? 1 : 0.95 }}\n        className={`p-4 rounded-full transition-all duration-300 ${getButtonStyle()}`}\n        title={getStatusText()}\n      >\n        <MicrophoneIcon className=\"w-6 h-6\" />\n      </motion.button>\n      \n      <div className={`text-xs px-3 py-1 rounded-full ${\n        isRecording \n          ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n          : isProcessing\n          ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n          : 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-200'\n      }`}>\n        {getStatusText()}\n      </div>\n\n      <div className={`text-xs text-center max-w-xs ${\n        darkMode ? 'text-gray-400' : 'text-gray-500'\n      }`}>\n        {!isRecording && !isProcessing && 'Click to record your message'}\n        {isRecording && 'Speak now, click again to stop'}\n        {isProcessing && 'Processing your voice...'}\n      </div>\n    </div>\n  );\n};\n\nexport default VoiceControl;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}